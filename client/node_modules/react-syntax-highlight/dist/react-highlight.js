'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

(function (factory) {
  if (typeof require === 'function' && (typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && module.exports === exports) {

    // Node: export as module
    module.exports = factory(require('react'), require('react-dom'), require('prop-types'), require('highlight.js'));
  } else {
    // Browser: export as global variable
    window.HighLight = window.HighLight || factory(React, ReactDOM, PropTypes, hljs);
  }
})(function (React, ReactDOM, PropTypes, hljs) {
  var HighLight = function (_React$Component) {
    _inherits(HighLight, _React$Component);

    function HighLight(props) {
      _classCallCheck(this, HighLight);

      var _this = _possibleConstructorReturn(this, (HighLight.__proto__ || Object.getPrototypeOf(HighLight)).call(this, props));

      _this.componentDidMount = _this.componentDidMount.bind(_this);
      _this.componentDidUpdate = _this.componentDidUpdate.bind(_this);
      _this.updateCodeBlockDOM = _this.updateCodeBlockDOM.bind(_this);
      _this.render = _this.render.bind(_this);
      return _this;
    }

    _createClass(HighLight, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        // this will only be called once after first time render
        this.updateCodeBlockDOM();
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate() {
        // whenever component is updated
        this.updateCodeBlockDOM();
      }
    }, {
      key: 'render',
      value: function render() {
        /*
         * <pre inherit_all_the_props_from_parent >
         *  <code ref='code' className={'hljs ' + this.props.lang}>
         *    to_be_rendered_by_highlight.js
         *  </code>
         * </pre>
         *
         */
        var props = Object.assign({}, this.props);
        delete props.lang;
        delete props.value;

        return React.createElement('pre', props, React.createElement('code', {
          ref: 'code',
          className: 'hljs ' + this.props.lang
        }));
      }
    }, {
      key: 'updateCodeBlockDOM',
      value: function updateCodeBlockDOM() {
        // update real DOM element after component render
        var ele = ReactDOM.findDOMNode(this.refs.code);

        try {
          ele.innerHTML = hljs.highlight(this.props.lang, this.props.value, true).value;
        } catch (e) {
          console.warn(e);
          ele.innerHTML = this.props.value; // remove syntax highlight
        }
      }
    }]);

    return HighLight;
  }(React.Component);

  ;

  HighLight.propTypes = {
    lang: PropTypes.string.isRequired,
    value: PropTypes.string.isRequired
  };

  return HighLight;
});